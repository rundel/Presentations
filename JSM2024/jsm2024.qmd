---
title: "Programmatic Manipulation of<br/>Quarto Documents for Teaching"
subtitle: "JSM 2024 - Portland"
author: "Colin Rundel"
institute: "Duke University"
footer: ""
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    self-contained: true
title-slide-attributes:
  data-background-image: background.png
  data-background-size: cover
execute:
  echo: true
---


```{r setup}
#| include: false
options(width=80)
library(fontawesome)
library(parsermd)
```

## `parsermd`

implements a C++ parser and abstract syntax tree (AST) for Quarto and R Markdown documents in R.

* supports manipulating of the ASTs (filtering, editing, etc.)

* ability to directly source and render the ASTs

* Started life during covid to aide in the grading of student assignments in a large machine learning course 

* v0.1.3 is on CRAN, v0.2.0 with full Quarto support on GitHub (CRAN imminently)



## Quarto elements

::: {.code-file .sourceCode .cell-code}
&nbsp;`r fontawesome::fa("file")` `hello.qmd`
:::

````{.markdown code-line-numbers="|1-4|14,19,47,49,56|6-12|6|7,8|10,11|51-54|60-73|79"}
{{< include _hello.qmd >}}
````


## Elements as AST

```{r}
qmd = parse_qmd("hello.qmd")
```

:::: {.columns}
::: {.column width='50%'}
```{r}
qmd |> print(flat = TRUE)
```
:::

::: {.column width='50%' .fragment}
```{r}
qmd |> print()
```
:::
::::

## As a tibble

```{r}
parse_qmd("hello.qmd") |> as_tibble()
```


## Why hierarchy?

Use a CSS selector like approach to target specific nodes based on *headings*,


:::: {.columns}
::: {.column width='50%'}
```{r}
qmd |> rmd_select(by_section("Meet Quarto"))
```
:::

::: {.column width='50%' .fragment}
```{r}
qmd |> rmd_select(by_section("Fenced divs"))
```
:::
::::

. . .

```{r}
qmd |> rmd_select(by_section(c("Other Quarto features", "*code*")))
```

```{r}
qmd |> rmd_select(by_section(c("Other Quarto features", "*code*"), keep_parents = FALSE))
```


## ast to quarto

These ASTs can be converted back to Quarto documents at any point,

:::: {.columns}
::: {.column width='50%'}
```{r}
qmd |> 
  rmd_select(by_section("Meet Quarto")) |>
  as_document() |>
  cat(sep = "\n")
```
:::

::: {.column width='50%' .fragment}
```{r}
qmd |> 
  rmd_select(by_section("Fenced divs")) |>
  as_document() |>
  cat(sep = "\n")
```
:::
::::

. . .

```{r}
qmd |> 
  rmd_select(by_section(c("Other Quarto features", "*code blocks*"), keep_parents = FALSE)) |>
  as_document() |>
  cat(sep = "\n")
```


## Additional selectors

While a work in progress, we are adding additional helpers based on `tidyselect`,

:::: {.columns}
::: {.column width='50%'}
```{r}
qmd |> rmd_select("plot-penguins")
```
:::

::: {.column width='50%'}
```{r}
qmd |> rmd_select(has_label("*p*"))
```
:::
::::

. . .

```{r}
qmd |> rmd_select(has_type(c("rmd_yaml", "rmd_chunk")))
```

. . .

```{r}
qmd |> rmd_select(!has_type("rmd_markdown"))
```

## Rendering

ASTs can also be directly rendered 

```{r}
#| results: hide
qmd |> render("hello_quarto")
```


<iframe src="hello_quarto.html" width="1000px" height="500px" style="padding: 5px;border: 1px solid darkgrey;">
</iframe>


# In Practice

## Spring 2024 - hw1

```{r}
fs::dir_tree("repos/")
```
::: {.aside}
These folders are the, lightly modified, result of cloning student repos using [`ghclass`](https://rundel.github.io/ghclass/).
:::


## Homework structure

::: {.panel-tabset}

### ast

```{r}
(hw1 = parse_qmd("repos/hw01_team01/hw1.qmd"))
```

### html

<iframe src="hw1.html" width="1000px" height="500px" style="padding: 5px;">
</iframe>

:::


## Simplifying the document

```{r}
hw1 |>
  rmd_select(has_type("rmd_yaml"), by_section(c("Task 1*")))
```

. . .

```{r}
hw1 |>
  rmd_select(has_type("rmd_yaml"), by_section(c("Task 1*"))) |>
  rmd_select(!by_section("Testing"))
```


## Adding something more

```{r}
hw1 |>
  rmd_select(has_type("rmd_yaml"), by_section(c("Task 1*"))) |>
  rmd_select(!by_section("Testing")) |>
  rmd_ast_append(
    rmd_chunk("tests", code = c(
      "fizzbuzz(1:5)",
      "fizzbuzz(5:1)",
      "fizzbuzz(-1)"
    ), options = list(error = TRUE))
  )
```

## Rendering the result

::: {.panel-tabset}
### code

```{r}
hw1 |>
  rmd_select(has_type("rmd_yaml"), by_section(c("Task 1*"))) |>
  rmd_select(!by_section("Testing")) |>
  rmd_ast_append(
    rmd_chunk("tests", code = c(
      "fizzbuzz(1:5)",
      "fizzbuzz(5:1)",
      "fizzbuzz(-1)"
    ), options = list(error = TRUE))
  ) |>
  render("hw1_task1")
```

### html

<iframe src="hw1_task1.html" width="1000px" height="500px" style="padding: 5px;">
</iframe>

:::


## Interactive tests

If you prefer to be able to interactively run the tests, you can use the `rmd_source()` to execute code from the ast,

```{r}
hw1 |>
  rmd_select("fizzbuzz") |>
  rmd_source()
```

```{r}
#| error: true
fizzbuzz(1:5)
fizzbuzz(5:1)
fizzbuzz(-1)
```

# "Of course someone has to write for loops. It doesnâ€™t have to be you." <br/>- Jenny Bryan

## Document collections

This is a *newish* feature and still a bit experimental,

```{r}
(hw1 = parse_qmd_collection("repos/"))
```

. . .

```{r}
hw1 |> as_ast()
```

## Filtering

```{r}
(task1 = hw1 |> 
   rmd_select(by_section(c("Task 1*"))) |>
   rmd_select(!by_section("Testing"))
)
```

. . .

```{r}
task1 |> as_ast()
```

## Rendered

```{r}
#| results: hide
task1 |> render(name = "hw1_task1_coll")
```

<iframe src="hw1_task1_coll.html" width="1000px" height="500px" style="padding: 5px;">
</iframe>


## With modifications

::: {.panel-tabset}
### code

:::: {.columns}
::: {.column width='40%'}
```{r}
#| results: hide
(task1 = task1 |> 
  rmd_ast_append(
    rmd_chunk("tests", code = c(
      "fizzbuzz(1:5)",
      "fizzbuzz(5:1)",
      "fizzbuzz(-1)"
    ), options = list(error = TRUE))
  ) |>
  as_ast() |>
  rmd_ast_prepend(
    rmd_chunk(
      "load-libraries", 
      code = "library(tidyverse)", 
      options = list(include=FALSE)
    )
  )
)
task1 |> render("hw1_task1_coll2")
```
:::

::: {.column width='60%'}
```{r}
#| echo: false
task1
```
:::
::::

### html

<iframe src="hw1_task1_coll2.html" width="1000px" height="500px" style="padding: 5px;">
</iframe>
:::


## What's next?

- The current version will be going up on CRAN imminently

- More work on helper functions for `rmd_select()`

- Implementing pipeable modifier functions 

- Thinking about more high-level user facing functions like `rmd_template()` and `rmd_check_template()` - see the [vignette](https://rundel.github.io/parsermd/articles/templates.html) for more details

- Any and all interesting use cases

## Questions?

<br/><br/>

::: {.large}
<table class="details">
  <tr>
    <td style="text-align:center">&nbsp;`r fa("home")`</td>
    <td><a href="https://rundel.github.io">rundel.github.io</a></td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fa("github")`</td>
    <td><a href="https://github.com/rundel/">rundel</a></td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fa("envelope")`</td>
    <td>
    <a href="mailto:rundel@gmail.com">rundel@gmail.com</a><br/>
    <a href="mailto:colin.rundel@duke.edu">colin.rundel@duke.edu</a>
    </td>
  </tr>
  <tr>
    <td style="text-align:center">&nbsp;`r fa("box-archive")`</td>
    <td>
    <a href="https://rundel.github.io/parsermd">rundel/parsermd</a>
    </td>
  </tr>
</table>
:::
